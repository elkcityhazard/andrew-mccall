<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-12-19T17:45:04-05:00</updated><id>http://localhost:4000/feed.xml</id><entry><title type="html">How To Host A Website On BunnyCDN</title><link href="http://localhost:4000/2020/10/28/host-a-static-website-for-cheap-on-bunnycdn-copy.html" rel="alternate" type="text/html" title="How To Host A Website On BunnyCDN" /><published>2020-10-28T00:00:00-04:00</published><updated>2020-10-28T00:00:00-04:00</updated><id>http://localhost:4000/2020/10/28/host-a-static-website-for-cheap-on-bunnycdn%20copy</id><content type="html" xml:base="http://localhost:4000/2020/10/28/host-a-static-website-for-cheap-on-bunnycdn-copy.html">&lt;p&gt;We all want our web hosting to be as cheap as possible, especially when we are starting out.  Often, many aspiring developers turn to shared hosting solutions to program their first static sites.  This is convenient because in the beginning most developers struggle with basic tasks like connecting through ftp and uploading their site.  As we progress, however, we begin to realize the limitations of shared hosting such as resource sharing and slow responses during peak times.  This is when we start exploring other options available to us.&lt;/p&gt;

&lt;h1 id=&quot;bunnycdn-hosting&quot;&gt;BunnyCDN Hosting&lt;/h1&gt;

&lt;p&gt;As the web has grown the limitations of the world wide web have becoming apparent.  As more businesses began relying on the internet as a core part of their business there needed to be away to transcend the limitations of the internet.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;../../../assets/images/posts/underwater-cable-map.png&quot; height=&quot;auto&quot; width=&quot;100%&quot; alt=&quot;underwater cable map&quot; title=&quot;Underwater Cable Map&quot; /&gt;
&lt;figcaption&gt;The underwater cable network that delivers the internet&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;For example, let us assume that this fictional page is being stored somewhere on a server in Argentina.  For those in Argentina the page will most likely load quite quickly because the data has very little distance to travel.  Now, let us suppose someone in Russia is requesting this fictional page.  The data is requested and then it travels the cable network until it reaches the destination which introduces latency along the way.  Because of geographical distance the content is delivered at a much lower speed to the end user.&lt;/p&gt;

&lt;h2 id=&quot;how-a-content-delivery-system-solves-the-geo-location-problem&quot;&gt;How A Content Delivery System Solves The Geo Location Problem&lt;/h2&gt;

&lt;figure&gt;
&lt;img src=&quot;../../../assets/images/posts/cdn-network.png&quot; height=&quot;auto&quot; width=&quot;100%&quot; alt=&quot;cdn network&quot; title=&quot;cdn network&quot; /&gt;
&lt;figcaption&gt;Content Delivery Networks distribute content evenly throughout the world&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;To solve the problem content delivery networks started popping up to distribute content evenly throughout the world.  Essentially content is hosted on an origin server and then mirrored on several cdn nodes throughout the world to put the content closer to the end user.  This can help solve a very important problem for website owners: making sure your website is fast!  Of course, this is not the only optimization you need to make to have a fast website but that is for another time.&lt;/p&gt;

&lt;h3 id=&quot;how-to-host-your-site-completely-on-a-cdn&quot;&gt;How To Host Your Site Completely On A CDN&lt;/h3&gt;

&lt;p&gt;This example uses bunnyCDN but you can do this with other cdn’s as well.&lt;/p&gt;

&lt;h4 id=&quot;set-up-storage-zone-and-pull-zone&quot;&gt;Set Up Storage Zone and Pull Zone&lt;/h4&gt;

&lt;p&gt;In the main admin panel you need to first create a storage zone.  You can name this whatever you want for example: my-new-domain. I do not include www or .com in this storage zone.&lt;/p&gt;

&lt;p&gt;Once the storage zone is created you need to link it to a pull zone.  There will be a link after you create the storage zone that is labeled “Connect Pull Zone”.&lt;/p&gt;

&lt;p&gt;once you click on that link you will be brought to a page to set up the pull zone. fill out the default hostname with whatever name you like, for example: my-new-domain.b-cdn.net.&lt;/p&gt;

&lt;p&gt;Now you have a storage zone set up with a pull zone connected to it.&lt;/p&gt;

&lt;h4 id=&quot;set-up-edge-rules-for-custom-domain-name&quot;&gt;Set Up Edge Rules For Custom Domain Name&lt;/h4&gt;

&lt;p&gt;Go to your edge rules and click on add new edge rule.&lt;/p&gt;

&lt;p&gt;The action will be &lt;strong&gt;Set Request Header&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The condition matching will be &lt;strong&gt;Match Any&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The conditions will be &lt;strong&gt;If Request URL Match Any *&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;click save edge rule.&lt;/p&gt;

&lt;h4 id=&quot;add-the-custom-hostname&quot;&gt;Add the Custom Hostname&lt;/h4&gt;

&lt;p&gt;Now go back to your pull zone and click on the pull zone you want to work with.  Next, add a new hostname.  This is the one that I make into the domain name I want to use: for example: my-new-domain.com&lt;/p&gt;

&lt;p&gt;Now you need to have access to your DNS records for your domain.  You will go to the website where you registered your domain because you need to make a custom dns record.&lt;/p&gt;

&lt;p&gt;I will use a website like https://ip-lookup.net/domain-lookup.php to find the public ip address of my cdn.  For Example: https://my-new-domain.b-cdn.net.  Once you get the IPv4 public address you need to go back to your dns provider and make a new dns record.&lt;/p&gt;

&lt;p&gt;Ideally you will have a dns provider that supports cname flattening.  This will make it easier to get set up with your ssl cert in the end but I was able to get it working by making an a record to my cdn ip address.&lt;/p&gt;

&lt;p&gt;The next step is to activate your ssl and enforce it then purge your cache.&lt;/p&gt;

&lt;h4 id=&quot;final-thoughts-on-bunnycdn-hosting&quot;&gt;Final Thoughts On BunnyCDN Hosting&lt;/h4&gt;

&lt;p&gt;I was able to get this up and running with pointing an a record to the public ip address.  It is my understanding that the ideal is to use a cname which only works at Top level domains with cname flattening.  I’m not sure what is going to happen if I leave it like this but it is a consideration since it isn’t 100% correct.&lt;/p&gt;</content><author><name>andrew</name></author><category term="static sites" /><category term="wordpress" /><category term="cdn" /><summary type="html">We all want our web hosting to be as cheap as possible, especially when we are starting out. Often, many aspiring developers turn to shared hosting solutions to program their first static sites. This is convenient because in the beginning most developers struggle with basic tasks like connecting through ftp and uploading their site. As we progress, however, we begin to realize the limitations of shared hosting such as resource sharing and slow responses during peak times. This is when we start exploring other options available to us.</summary></entry><entry><title type="html">Simple Parallax Scrolling</title><link href="http://localhost:4000/2020/10/06/easy-parallax-scrolling.html" rel="alternate" type="text/html" title="Simple Parallax Scrolling" /><published>2020-10-06T00:00:00-04:00</published><updated>2020-10-06T00:00:00-04:00</updated><id>http://localhost:4000/2020/10/06/easy-parallax-scrolling</id><content type="html" xml:base="http://localhost:4000/2020/10/06/easy-parallax-scrolling.html">&lt;h1 id=&quot;simple-parallax-scrolling-with-javascipt&quot;&gt;Simple Parallax Scrolling With Javascipt&lt;/h1&gt;

&lt;p&gt;Parallax scrolling is ubiquitous in today’s web design approaches. There are, however, those who dissent. It has a simple, pre-attentive trait that aims to capture attention quickly but often misses its purported mark. Human’s have learned to quickly filter out “banner noise” and only recognize information that is relevant to their query.&lt;/p&gt;

&lt;h2 id=&quot;javscript-parallax-scrolling&quot;&gt;Javscript Parallax Scrolling&lt;/h2&gt;

&lt;pre&gt;
const parallax = (id, rate) =&amp;gt; {
let el = document.querySelector(id);
const sp = () =&amp;gt; {
let x = el.getBoundingClientRect().top / rate;
let y = Math.round(x \* 100) / 100;
el.style.backgroundPosition = 'center ' + y + 'px';
}
sp();
window.addEventListener('scroll', function(e) { sp(); });
}

parallax('.one', 10);
parallax('.two', 5);
&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;We are going to start out by defining a function that takes two parameters. The first will be the id which is simply either the class or id of the element you want to add the parallax effect to.&lt;/li&gt;
  &lt;li&gt;The second parameter it takes in is the modifier. This is simply an integer value used to alter the scroll speed to give the desired effect.&lt;/li&gt;
  &lt;li&gt;Within the function we are going to create another function which handles the calculation for the background position. There are two formulas you need to know here:
let x = paraId.getBoundingClientRect().top / modifier; let y = Math.round(x * 100) / 100;&lt;/li&gt;
  &lt;li&gt;After we calculate the x and y variables we are going to update the backgroundPosition such that el.style.backgroundPosition = ‘center’ + y + px;&lt;/li&gt;
  &lt;li&gt;Then, inside the parallax function we simply want to call that function to get the values: sp();&lt;/li&gt;
  &lt;li&gt;finally while still in the function we want to call the event listener on the scroll: window.addEventListener(‘scroll’, function(e) { sp(); });&lt;/li&gt;
  &lt;li&gt;Finally, call the function with the desired parameters to get things working.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;parallax(‘.cont’, 6)&lt;/p&gt;

&lt;h2 id=&quot;the-state-of-parallax-scrolling&quot;&gt;The State Of Parallax Scrolling&lt;/h2&gt;

&lt;p&gt;I really do not recommend doing this. It hurts your performance and never achieves the desired user experience that you would hope for. Nevertheless, this is a good tool to have for those few use cases that it might benefit from.&lt;/p&gt;</content><author><name>andrew</name></author><category term="parallax scrolling" /><category term="web development" /><category term="javascript" /><category term="learn to code" /><summary type="html">Parallax scrolling is ubiquitous in today's web design approaches. There are, however, those who dissent. Some assert that it is a poor approach that actually distracts the user.</summary></entry><entry><title type="html">Give Back Useful Information For CRUD PATCH Updates</title><link href="http://localhost:4000/2020/09/02/a-fun-validation-trick-for-updating-crud.html" rel="alternate" type="text/html" title="Give Back Useful Information For CRUD PATCH Updates" /><published>2020-09-02T00:00:00-04:00</published><updated>2020-09-02T00:00:00-04:00</updated><id>http://localhost:4000/2020/09/02/a-fun-validation-trick-for-updating-crud</id><content type="html" xml:base="http://localhost:4000/2020/09/02/a-fun-validation-trick-for-updating-crud.html">&lt;h2 id=&quot;return-useful-information-to-your-users-regarding-crud-operations&quot;&gt;Return useful information to your users regarding crud operations&lt;/h2&gt;

&lt;pre&gt;exports.updateSingleTask = async (req, res, next) =&amp;gt; {
const updates = Object.keys(req.body);
const allowedUpdates = ['description', 'completed'];
const isValidOperation = updates.every((update) =&amp;gt; {
return allowedUpdates.includes(update);
})

    if (!isValidOperation) {
        return res.status(400).send({error: &quot;The property you tried to update does not exist&quot;})
    }
    try {

const task = await Task.findByIdAndUpdate(req.params.id, req.body, {
new: true,
runValidators: true
})
if (!task) {
return res.status(404).send();
}
res.send(task)
} catch(err) {
res.status(400).send(err);
}
}&lt;/pre&gt;

&lt;h3 id=&quot;how-user-feedback-works&quot;&gt;How User Feedback Works&lt;/h3&gt;

&lt;p&gt;The problem: A user somehow defines an object property that does not exist in your database.&lt;/p&gt;

&lt;p&gt;For example, lets say you have a task to update. There might be a description and also a completed attribute. Lets say the user wants to use a PATCH request to update that bad boy but for whatever reason they end sending something like this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{ &quot;date&quot; : &quot;mm:dd:yyyy&quot; }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Of course, mongoose would just accept this as a valid operation but nothing useful would return to the user that they made a mistake.&lt;/p&gt;

&lt;p&gt;The answer: create a check for allowed updates and only continue the operation if it returns true.&lt;/p&gt;

&lt;pre&gt;exports.updateSingleTask = async (req, res, next) =&amp;gt; {
const updates = Object.keys(req.body);
const allowedUpdates = ['description', 'completed'];
const isValidOperation = updates.every((update) =&amp;gt; {
return allowedUpdates.includes(update);
})

    if (!isValidOperation) {
        return res.status(400).send({error: &quot;The property you tried to update does not exist&quot;})
    }&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;parse the req.body object into an array&lt;/li&gt;
  &lt;li&gt;create an allowedUpdates variable to establish which propertiecan be updated&lt;/li&gt;
  &lt;li&gt;check to see if the data sent to the server is a valid operation.using the every method check to see if each value in the updatevariable is in the allowedUpdates list. If all of them are indeeincluded then isValidation will return true and the operation wilcontinue as normal. If isValidOperator returns false then return 400 error with some useful information for the user.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is a fun little example to help provide more useful feedback the user.&lt;/p&gt;</content><author><name>andrew</name></author><category term="javascript" /><category term="web development" /><category term="learn to code" /><summary type="html">A user somehow defines an object property that does not exist in your database.</summary></entry><entry><title type="html">The Surprising Way To Avoid Failure Learning To Code As An Adult</title><link href="http://localhost:4000/2020/07/11/the-struggle-to-learn-programming-is-real.html" rel="alternate" type="text/html" title="The Surprising Way To Avoid Failure Learning To Code As An Adult" /><published>2020-07-11T00:00:00-04:00</published><updated>2020-07-11T00:00:00-04:00</updated><id>http://localhost:4000/2020/07/11/the-struggle-to-learn-programming-is-real</id><content type="html" xml:base="http://localhost:4000/2020/07/11/the-struggle-to-learn-programming-is-real.html">&lt;p&gt;&lt;img class=&quot;img-responsive&quot; data-src=&quot;/assets/images/posts/learning.jpg&quot; alt=&quot;an adult learning&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;a-personal-story-for-those-on-the-journey&quot;&gt;A Personal Story For Those On The Journey&lt;/h1&gt;

&lt;p&gt;Learning is hard. Really hard. Especially when you already have a busy job, career, family, or bowling league (I kid) that requires your daily attention. These are a few of the things that lure you away into existential despair, meaninglessness, cruelty, manipulation and absurdity. There are so many other distractions out there. Netflix anyone? Maybe you decided to take up trading stocks on Robinhood. You have too many friends? There are so many distractions and, on top of that, you have decided to learn to code for fun or profit.&lt;/p&gt;

&lt;h2 id=&quot;a-brief-guide-to-learning-how-to-code&quot;&gt;A Brief Guide To Learning How To Code&lt;/h2&gt;

&lt;p&gt;The simple answer: practice, practice, practice. Repitition is the ultimate way to learning how to code as an adult. As we get older it becomes harder for us to learn things and generally takes more time for concepts to sink in and information synthesis can occur. I am learning this constantly as I continue on my journey.
There are a few things that have seemed to help me a little bit.&lt;/p&gt;

&lt;h3 id=&quot;a-few-tips-to-help-the-learning-process&quot;&gt;A Few Tips To Help The Learning Process&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Learn in small chunks
    &lt;ul&gt;
      &lt;li&gt;Take concepts and break them down to each part&lt;/li&gt;
      &lt;li&gt;Create micro projects that are exclusively for the purpose of learning a new concept&lt;/li&gt;
      &lt;li&gt;Repeat. I will usually try and make at least three micro projects with the new concept before I move on. Sometimes, I will make a half dozen projects or use a new concept for several production projects to solidify my understanding&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Ask for help
    &lt;ul&gt;
      &lt;li&gt;I am stubborn. I do not do this often enough. Instead, I toil away hoping that I will eventually stumble upon the solution. You will be different. You generally want the lifestyle and you do not want to wait around to get it. If you are stuck on something just do yourself a favor and &lt;strong&gt;ask for help&lt;/strong&gt;.&lt;/li&gt;
      &lt;li&gt;Find local coders using such tools as facebook, reddit, discord, meetup, your local bulletin board and make a few friends. If you get stuck use those friends as a resource. They will help you fill in the knowledge gap and connect the pieces that you are not quite getting yet.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Take a break
    &lt;ul&gt;
      &lt;li&gt;Your mind has a way of working in mysterious ways. If you are hitting your head over the computer keyboard it is time to take a break. Walk the dog, spend time with the wife/husband, make your fifth cup of coffee for the day. Do anything! When you come back you will have a refreshed attitude and new perspective to view the problem with.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;how-to-deal-with-frustration-learning-how-to-code&quot;&gt;How To Deal With Frustration Learning How To Code&lt;/h3&gt;

&lt;p&gt;You will want to give up. Your significant other will wonder if you ever plan to spend time with them again. Your friends will think you fell off the face of the Earth. You are stuck! You aren’t progressing. You haven’t finished any projects. These are all the signs that lead to frustration. The simple solution is to keep up your commitment. Remember, learning to interact with computers is supposed to be fun! If you do nothing you will never achieve growth. When frustration grows it is time to remember what your motives are and what aspects you actually enjoy. Try and remind yourself everyday but also try and remember that you will &lt;strong&gt;never&lt;/strong&gt; learn it all! It is impossible to learn every aspect of computer programming so stop trying to! If you feel like you are not learning something fast enough then step back and learn a related concept first.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Learning to code is hard. I feel stuck or frustrated on a daily/weekly basis and find myself searching for the simplest things on stackoverflow. These are just a few of the things that have helped me along the way and I would love to hear from you if you have some other great ideas that would help.&lt;/p&gt;</content><author><name>andrew</name></author><category term="javascript" /><category term="web development" /><category term="learn to code" /><summary type="html">Learning is hard. Really hard. Especially when you already have a busy job, career, family, or bowling league (I kid) that requires your daily attention.</summary></entry><entry><title type="html">How To Initialize A Javascript XMLHttpRequest</title><link href="http://localhost:4000/2020/06/29/How-To-Create-An-Easy-XMLHttpRequest.html" rel="alternate" type="text/html" title="How To Initialize A Javascript XMLHttpRequest" /><published>2020-06-29T00:00:00-04:00</published><updated>2020-06-29T00:00:00-04:00</updated><id>http://localhost:4000/2020/06/29/How-To-Create-An-Easy-XMLHttpRequest</id><content type="html" xml:base="http://localhost:4000/2020/06/29/How-To-Create-An-Easy-XMLHttpRequest.html">&lt;p&gt;&lt;img data-src=&quot;/assets/images/posts/xmlhttprequest.jpg&quot; alt=&quot;a human making an xmlhttprequest&quot; title=&quot;neon switchboard&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One of the first things to learn when learning asynchronous javascript is how to make an XMLHttpRequest. In this short article I am going to show you briefly how to achieve this so you can add some very powerful and dynamic features to your website. Perhaps you want to make a NASA image slideshow? A popular Chuck Norris Joke Generator? All of these things can be achieved using XHR to call an API and retrieve information.&lt;/p&gt;

&lt;h2&gt;What is an XMLHttpRequest&lt;/h2&gt;
&lt;p&gt;An XMLHttpRequest is an API which is an object and its job is to transfer data between the web browser and web server.  The object is initialized by the browser and the idea behind it is to solve one problem: to be able to continuously update a loaded web page. One thing to note is that the Fetch Alternative has replaced the XMLHttpRequest but I think it is a good idea to know this way as it is good practice and helps to understand some higher order javascript concepts.&lt;/p&gt;

&lt;h2&gt;Format XMLHttpRequest&lt;/h2&gt;

&lt;p&gt;In your file named something like app.js you will have something that looks like this:&lt;/p&gt;

&lt;pre&gt;
document.getElementById('button').addEventListener('click', loadData);

function loadData() {
    //  CREATE NEW XMLHttpRequest

    const xhr = new XMLHttpRequest():

    //  OPEN Request
    xhr.open('GET', '{api url}', true);

    xhr.onprogress = function() {
        // do something while loading for example:
        console.log('READYSTATE', this.readyState);
    }

    xhr.onload = function() {
        const response = JSON.parse(this.responseText);
        //  Do Something like add data to the DOM
        document.getElementById('targetDOMElement').innerHTML = `
        &lt;li&gt;${response.responseText}&lt;/li&gt;
        `;
    }

    xhr.send();
}
&lt;/pre&gt;

&lt;h2&gt;Explaining An XMLHttpRequest&lt;/h2&gt;

&lt;p&gt;In part one of loadData you are initializing a new asychronous XMLHttpRequest. The second part gets three parameters: whether it is a GET or POST request, the api url, and whether or not it is an asynchronous request or not.&lt;/p&gt;

&lt;p&gt;onprogress will do something while the xhr request is communicating with the api. Since we do not know how long the server will be communicating with the page, we can load a loading icon there to indicate that the api is still communicating with the page.&lt;/p&gt;

&lt;p&gt;xhr.onload is essentially the bread and butter of the asynchronous request. It says to the browser, “grab this information and do this with it.” For example, in the footer of this website the request calls the openweather api and returns the local weather and outputs it to the footer of the page.&lt;/p&gt;

&lt;p&gt;The final part of the equation is the send method. This is what sends the necessary information to the server to be processed.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Again, these are just simple notes to help you get up and running with the most basic XMLHttpRequest. This is not meant to be exhaustive source but just informational. It helps me to see things broke down to the most basic form possible and then built up from there. I hope this can help someone who is learning XMLHttpRequests like I am!&lt;/p&gt;

&lt;p&gt;Please &lt;a class=&quot;visible inline-link&quot; href=&quot;/contact&quot; title=&quot;contact me&quot;&gt;contact me&lt;/a&gt; if you have any questions or comments and I’ll be more than happy to get back to you!&lt;/p&gt;</content><author><name>andrew</name></author><category term="javascript" /><category term="web development" /><category term="learn to code" /><summary type="html">One of the first things to learn when learning asynchronous javascript is how to make an XMLHttpRequest. In this short article I am going to show how to achieve this so you can add some very powerful and dynamic features to your website. Perhaps you want to make a NASA image slideshow? A popular Chuck Norris Joke Generator? All of these things can be achieved using XHR to call an API and retrieve information.</summary></entry><entry><title type="html">How To Calculate Time For Javascript Functions</title><link href="http://localhost:4000/2020/06/25/calculate-time-for-javascript.html" rel="alternate" type="text/html" title="How To Calculate Time For Javascript Functions" /><published>2020-06-25T00:00:00-04:00</published><updated>2020-06-25T00:00:00-04:00</updated><id>http://localhost:4000/2020/06/25/calculate-time-for-javascript</id><content type="html" xml:base="http://localhost:4000/2020/06/25/calculate-time-for-javascript.html">&lt;p&gt;&lt;img data-src=&quot;/assets/images/posts/clock.jpg&quot; alt=&quot;a clock being held in the air&quot; title=&quot;clock&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As I’ve been learning more javascript I found dates and time to be a bit confusing. I will try and break down some of the parts to make it easier for someone else to learn as well.&lt;/p&gt;

&lt;h2&gt;The Date Object&lt;/h2&gt;
&lt;p&gt;Let us say you wanted to work with the date  January 1st, 2021.  In javascript we could write something like this:&lt;/p&gt;
&lt;pre&gt;let newYear = newDate(2021, 00, 01)&lt;/pre&gt;

&lt;p&gt;that would return:&lt;/p&gt;

&lt;pre&gt;Date Fri Jan 01 2021 00:00:00 GMT-0500 (Eastern Standard Time)&lt;/pre&gt;

&lt;p&gt;So the use case that I needed was pretty simple but hard for me to figure out at first so I want to go over it for future reference.&lt;/p&gt;

&lt;p&gt;We all build a new year countdown clock at some point when learning dates and times. The one I ended up referencing was &lt;a class=&quot;visible inline-link&quot; href=&quot;https://traversymedia.com/&quot; rel=&quot;noreferrer nofollow&quot; alt=&quot;traversymedia&quot;&gt;Brad Traversy’s&lt;/a&gt; which you can find &lt;a class=&quot;visible inline-link&quot; rel=&quot;noreferrer nofollow&quot; href=&quot;https://vanillawebprojects.com/projects/new-year-countdown/&quot; title=&quot;Brad Traversy's New Year Clock&quot;&gt; here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To make a countdown timer you only need the current time and the date you want to count down to. to achieve this I did this:&lt;/p&gt;

&lt;h2&gt;Javascript Time Code Snippets&lt;/h2&gt;

&lt;pre&gt;
const currentYear = new Date().getFullYear();
const newYear = new Date(`January 01 ${currentYear + 1} 00:00:00`); //  this allows it to update every year
const currentTime = new Date();
const diff = newYear - currentTime;
&lt;/pre&gt;

&lt;p&gt;This is pretty much the set up in the function.&lt;/p&gt;

&lt;p&gt;diff returns a value like:&lt;/p&gt;

&lt;pre&gt;
newYear - new Date()
16361376895
&lt;/pre&gt;

&lt;p&gt;Javascript likes to work in milliseconds so I need to convert those values.&lt;/p&gt;

&lt;p&gt;to do that here are the following javascript time forumulas I used:&lt;/p&gt;

&lt;pre&gt;
let d = Math.round(diff / 1000 / 60 / 60 / 24);
  let h = Math.round((diff / 1000 / 60 / 60) % 24);
  let m = Math.round((diff / 1000 / 60) % 60);
  let s = Math.round((diff / 1000) % 60);
&lt;/pre&gt;

&lt;p&gt;These are just simple math formulas that you can find anywhere on the internet. basically you just need to update your dom elements if you are creating a counter.&lt;/p&gt;

&lt;p&gt;now if you want to have it update every second you just need to add the following line of code:&lt;/p&gt;

&lt;pre&gt;
setInterval(updateTime, 1000);
&lt;/pre&gt;

&lt;p&gt;This will start executing updateTime function every 1000 ms.&lt;/p&gt;

&lt;p&gt;I hope this helps someone when they go to work with converting days, minutes, hours, etc. If you have any questions or want to see some code feel free to reach out to me &lt;a class=&quot;visible inline-link&quot; href=&quot;/contact.html&quot;&gt;here&lt;/a&gt;!&lt;/p&gt;</content><author><name>andrew</name></author><category term="javascript" /><category term="web development" /><summary type="html">In order to work with dates in javascript, you have to first create a new instance of the date object. Then you can specify the time and date you want it to represent.</summary></entry><entry><title type="html">Recursive Functions</title><link href="http://localhost:4000/2020/06/19/recursive-functions.html" rel="alternate" type="text/html" title="Recursive Functions" /><published>2020-06-19T00:00:00-04:00</published><updated>2020-06-19T00:00:00-04:00</updated><id>http://localhost:4000/2020/06/19/recursive-functions</id><content type="html" xml:base="http://localhost:4000/2020/06/19/recursive-functions.html">&lt;p&gt;Recursive functions are at first difficult to wrap your head around. Essentially, a recursive function is one that calls itself as part of the function. For a recursive function to not overload the call stack there needs to be a condition set to cause the function to stop calling on itself.&lt;/p&gt;

&lt;p&gt;For Example in javascript:&lt;/p&gt;

&lt;pre&gt;
function recursion(x) {
if (x == 0) {
return x;
}
console.log(x)
return recursion(x-1);
}

console.log(recursion(20));
&lt;/pre&gt;

&lt;p&gt;In this example, we set the condition to stop calling itself if x is equal to zero. Until that happens, x will incrementally subtract 1 from itself until the condition is met and log the result to the console. In this example, we are starting at 20 and subtracting 1 each time until we get to zero.&lt;/p&gt;

&lt;p&gt;See how the function calls itself in the second part of the conditional statement. Essentially, the function is saying, “hey we have not yet met the desired condition yet so we better subtract another one.” So the function calls itself again but this time it subtracts 1 from x. So if we started with x == 20 we now have x = 19 and the function runs again if the condition is not met all the way until it counts down to zero.&lt;/p&gt;

&lt;p&gt;To my understanding recursion can result in poor time efficiencies. In some languages it can result in the allocation of a new stack frame and require the implementation of multiple threads of execution. Also, in some environments it is simply preferred to implement a higher order function such as “map”, “filter”, and “reduce”. It is sometimes the case that these higher order functions can receive a boost from parallelization.&lt;/p&gt;

&lt;p&gt;Ultimately, recursion usually takes up greater resource allocation to complete and iteration (looping) usually takes up less. Ultimately, I prefer to use iteration when processing simple sequential data structures and anywhere a simple loop will do the trick. If I need to process a recursive data structure, however, I will use recursion - especially if the result is cleaner and simple for the next person to read.&lt;/p&gt;

&lt;p&gt;These are just simple notes as I learn about javascript. If you have any questions, want a better explanation, or just want to chat code on your coding feel free to reach out to me&lt;a href=&quot;/contact.html&quot; class=&quot;visible inline-link&quot; title=&quot;contact me&quot;&gt;here&lt;/a&gt;&lt;/p&gt;</content><author><name>andrew</name></author><category term="javascript" /><category term="web development" /><summary type="html">It is acceptable for a function to call itself as long as it does not over flow the call stack. A function that calls itself is called a recursive function.</summary></entry><entry><title type="html">Quickly Connect To MongoDB In NodeJS</title><link href="http://localhost:4000/2020/06/14/quickly-connect-to-mongodb.html" rel="alternate" type="text/html" title="Quickly Connect To MongoDB In NodeJS" /><published>2020-06-14T00:00:00-04:00</published><updated>2020-06-14T00:00:00-04:00</updated><id>http://localhost:4000/2020/06/14/quickly-connect-to-mongodb</id><content type="html" xml:base="http://localhost:4000/2020/06/14/quickly-connect-to-mongodb.html">&lt;p&gt;I will get quickly to the point.&lt;/p&gt;

&lt;pre&gt;
const express = require(&quot;express&quot;);
const app = express();
const mongodb = require(&quot;mongodb&quot;);
const router = require(&quot;./router&quot;);
let db;

connectionString =
  &quot;your mongo connection string here&quot;

app.set(&quot;views&quot;, &quot;views&quot;);
app.set(&quot;view engine&quot;, &quot;ejs&quot;);

app.use(express.static(&quot;public&quot;));
app.use(express.urlencoded({ extended: false })); //  boilerplate to initialize req.body.input-name
app.use(express.json());
app.use(&quot;/&quot;, router);
app.use(&quot;/thanks&quot;, router);

mongodb.connect(
  connectionString,
  { useNewUrlParser: true, useUnifiedTopology: true },
  function (err, client) {
    db = client.db();
    app.listen(port number);
  }
);
&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;make sure node.js is installed on your system.&lt;/li&gt;
  &lt;li&gt;start a new project.&lt;/li&gt;
  &lt;li&gt;using terminal, cd into project directory.&lt;/li&gt;
  &lt;li&gt;npm init -y
create app.js&lt;/li&gt;
  &lt;li&gt;You need to know your mongodb database name and collection&lt;/li&gt;
  &lt;li&gt;npm install mongodb&lt;/li&gt;
  &lt;li&gt;in app.js require and initialize express.&lt;/li&gt;
  &lt;li&gt;require mongodb and initialize routes if available&lt;/li&gt;
  &lt;li&gt;initialize db variable.&lt;/li&gt;
  &lt;li&gt;to get form data you need to use the express.urlencoded feature to get req.body.input-name&lt;/li&gt;
  &lt;li&gt;monbodb.connect takes 3 arguments
connectionstring (from mongodb), an object, and then a function&lt;/li&gt;
  &lt;li&gt;make sure to establish database connection before listening on the port&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These are quick and dirty notes for communicating with the database server.&lt;/p&gt;</content><author><name>andrew</name></author><category term="javascript" /><category term="web development" /><summary type="html">Use mongodb to set up your first database. This is a quick and easy way to get mongodb set up with nodejs.</summary></entry><entry><title type="html">Console.Log A Chessboard</title><link href="http://localhost:4000/2020/06/11/console-log-a-chess-board.html" rel="alternate" type="text/html" title="Console.Log A Chessboard" /><published>2020-06-11T00:00:00-04:00</published><updated>2020-06-11T00:00:00-04:00</updated><id>http://localhost:4000/2020/06/11/console-log-a-chess-board</id><content type="html" xml:base="http://localhost:4000/2020/06/11/console-log-a-chess-board.html">&lt;p&gt;&lt;img data-src=&quot;/assets/images/posts/chessboard.jpg&quot; alt=&quot;Chessboard&quot; title=&quot;how to make a text-based chessboard&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;
        Write a program that creates a string that represents an 8×8 grid, using newline characters to separate lines. At each position of the grid there is either a space or a &quot;#&quot; character. The characters should form a chessboard.

Passing this string to console.log should show something like this:

 # # # #
# # # # 
 # # # #
# # # # 
 # # # #
# # # # 
 # # # #
# # # #

When you have a program that generates this pattern, define a binding size = 8 and change the program so that it works for any size, outputting a grid of the given width and height.
&lt;/pre&gt;

&lt;p&gt;Things To Learn Here&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Variables&lt;/li&gt;
&lt;li&gt;For Loop&lt;/li&gt;
&lt;li&gt;% Modulus (division remainder)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first thing we want to do is define a couple of variables:&lt;/p&gt;

&lt;pre&gt;
let size = 8;
let board = ' ';
&lt;/pre&gt;

&lt;p&gt;This defines the height and the width that the board will be. we set board to an empty string to act as the first space of the board.&lt;/p&gt;

&lt;p&gt;To accomplish this we need to go ahead and use a nested for loop.&lt;/p&gt;

&lt;pre&gt;
for (let i = 0; i &amp;lt; size; i++) {
    for (let j = 0; j &amp;lt; size; j++) {
        if((i+j) % 2 === 0 ) {
            board += ' ';
        } else {
            board += '#';
        }
    }
    board += '\n';
}
&lt;/pre&gt;

&lt;p&gt;basically we are checking each space with its corresponding space to see if it is even or odd. If it is even we are outputting a blank space. If it is odd we are outputting an octothorpe. We use the modulus operator to determine this.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;board += '\n';&lt;/code&gt; tells us to make a line break at the end of the line.&lt;/p&gt;

&lt;p&gt;The basics of a for loop are setting a starting index, which is usually 0, setting a limit which is usually a number or array length, and then incrementing the loop index until all indexes have been exhausted.&lt;/p&gt;

&lt;p&gt;for example:&lt;/p&gt;

&lt;pre&gt;
let list = new Array(1,2,3,4,5);

for (let i = 0; i &amp;lt; list.length; i++) {
    console.log(i);
}
&lt;/pre&gt;

&lt;p&gt;This will output the following to the console:&lt;/p&gt;

&lt;pre&gt;
0 
1 
2 
3 
4
&lt;/pre&gt;

&lt;p&gt;I think that pretty much wraps up my loose understanding of nested lists.&lt;/p&gt;

&lt;p&gt;If you have any questions or find any errors feel free to reach out to me &lt;a href=&quot;/contact&quot; title=&quot;contact me&quot; aria-label=&quot;navigation&quot;&gt;here.&lt;/a&gt;&lt;/p&gt;</content><author><name>andrew</name></author><category term="for loop" /><category term="web development" /><category term="javascript" /><category term="learn to code" /><summary type="html">A brief example of nested loops to make a text based chessboard.</summary></entry><entry><title type="html">Intersection Observer API</title><link href="http://localhost:4000/2020/06/10/intersection-observer.html" rel="alternate" type="text/html" title="Intersection Observer API" /><published>2020-06-10T00:00:00-04:00</published><updated>2020-06-10T00:00:00-04:00</updated><id>http://localhost:4000/2020/06/10/intersection-observer</id><content type="html" xml:base="http://localhost:4000/2020/06/10/intersection-observer.html">&lt;p&gt;&lt;img data-src=&quot;/assets/images/posts/intersection-observer.jpg&quot; alt=&quot;Intersection Being Observed&quot; title=&quot;Intersection Being Observed&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I wanted to be able to easily load an animation if an element came into view. Intersection observer seems to be the quickest way for me. If you want to use this for lazy loading you can give your images a data-src property instead of src then assign the data-src to the src when the element comes into view.&lt;/p&gt;

&lt;p&gt;My basic template is:&lt;/p&gt;

&lt;pre&gt;
let images = document.querySelectorAll('.image-class');

observer = new IntersectionObserver((entries) =&amp;gt; {
  entries.forEach(entry =&amp;gt; {
    if (entry.intersectionRatio &amp;gt; 0) {
      let attr = image.target.getAttribute('data-src');
      image.target.src = attr;
      entry.target.classList.add(&quot;animate__animated&quot;);
      entry.target.classList.add(&quot;animate__fadeIn&quot;);
      observer.unobserve(entry.target);
    } else {
      //entry.target.classList.remove('animate__animated animate__bounce');
      return;
    }
  });
});

images.forEach(image =&amp;gt; {
  observer.observe(image);
});
&lt;/pre&gt;

&lt;p&gt;This is the basic set up. If you have an image that you want to lazy load you can do something like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
&amp;lt;img data-src=&quot;url&quot; alt=&quot;image alt&quot; class=&quot;image-class&quot;&amp;gt;
&lt;/code&gt;
and in the javascript you can add:&lt;/p&gt;

&lt;pre&gt;
let attr = image.target.getAttribute('data-src');
      image.target.src = attr;
&lt;/pre&gt;

&lt;p&gt;to the function body.&lt;/p&gt;

&lt;p&gt;Intersection observer takes two arguments: the element to be observed and the options.&lt;/p&gt;

&lt;pre&gt;
let options = {
  root: null
  rootMargin: &quot;0px&quot;,
  threshold: 1.0,
};
let observer = new intersectionObserver((images, options) =&amp;gt; {
    //Do something with images
});
&lt;/pre&gt;

&lt;p&gt;root: defines what the viewport area is. If null it will default to the viewport. But you can also use document.getELementById to pick a intersection cross section.&lt;/p&gt;

&lt;p&gt;rootMargin: is similar to margin in that it adds margin to your intersection observer entry so that it will trigger with margin added to it.&lt;/p&gt;

&lt;p&gt;threshold: is how much should be in the observation area before the request triggers. For example 1.0 means the entire element needs to be in the viewport. This can also be an array so that the callback runs every time visibility passes a threshhold. For example:&lt;/p&gt;

&lt;pre&gt;[0, 0.25, 0.5, 0.75, 1.0]&lt;/pre&gt;</content><author><name>andrew</name></author><category term="javascript" /><category term="web development" /><summary type="html">Use intersection observer to asynchronously observe a DOM element and trigger events based on if it is within the viewport.</summary></entry></feed>